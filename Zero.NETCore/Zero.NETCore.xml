<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zero.NETCore</name>
    </assembly>
    <members>
        <member name="T:Zero.NETCore.Extensions.DateTimeExtensions">
            <summary>
            日期扩展方法
            </summary>
        </member>
        <member name="M:Zero.NETCore.Extensions.DateTimeExtensions.GetMondayDate(System.DateTime)">
            <summary>
            计算某日起始日期（礼拜一的日期）
            </summary>
            <param name="source">该周中任意一天</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.DateTimeExtensions.GetSundayDate(System.DateTime)">
            <summary>
            计算某日起始日期（礼拜日的日期）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.DateTimeExtensions.ToStandardString(System.DateTime)">
            <summary>
            转化成标准格式（yyyy-MM-dd HH:mm:ss）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.DateTimeExtensions.ToStandardString(System.Nullable{System.DateTime})">
            <summary>
            转化成标准格式（yyyy-MM-dd HH:mm:ss）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.DateTimeExtensions.ToUnixDateTimeFromSeconds(System.Int64)">
            <summary>
            将unix timestamp时间戳(秒) 转换为.NET的DateTime  
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.DateTimeExtensions.ToUnixDateTimeFromMilliSeconds(System.Int64)">
            <summary>
            将unix timestamp时间戳(毫秒) 转换为.NET的DateTime  
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.DateTimeExtensions.ToUnixTimeSeconds(System.DateTime)">
            <summary>
            将.NET的DateTime转换为unix timestamp时间戳(秒)
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.DateTimeExtensions.ToUnixTimeMilliseconds(System.DateTime)">
            <summary>
            将.NET的DateTime转换为unix timestamp时间戳(毫秒)
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.DateTimeExtensions.ToTimeString(System.Int32)">
            <summary>
            将秒转换成时间字符串
            如果小时>0则显示 HH时mm分ss秒
            否则显示 mm分ss秒
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Extensions.EnumExtensions">
            <summary>
            枚举扩展方法
            </summary>
        </member>
        <member name="M:Zero.NETCore.Extensions.EnumExtensions.ToInt32(System.Enum)">
            <summary>
            将枚举转换为数字
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            获取枚举值的描述信息
            </summary>
            <param name="source">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.EnumExtensions.GetDescription(System.Enum,System.Type)">
            <summary>
            获取枚举值的描述信息
            </summary>
            <param name="enumType">Type,该参数的格式为typeof(需要读的枚举类型)</param>
            <param name="source">枚举值</param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Extensions.Int32Extensions">
            <summary>
            int扩展
            </summary>
        </member>
        <member name="M:Zero.NETCore.Extensions.Int32Extensions.ToEnum``1(System.Int32,``0)">
            <summary>
            将字符串转成指定的枚举类型(字符串可以是枚举的名称也可以是枚举值)
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="source">源字符串</param>
            <param name="defaultValue">如果转换失败，返回默认的枚举项</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.Int32Extensions.ToEnumExt``1(System.Int32,``0)">
            <summary>
            将字符串转成指定的枚举类型(字符串可以是枚举的名称也可以是枚举值)
            <remarks>支持枚举值的并集</remarks>
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="source">源字符串</param>
            <param name="defaultValue">如果转换失败，返回默认的枚举项</param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Extensions.Int64Extensions">
            <summary>
            long扩展
            </summary>
        </member>
        <member name="M:Zero.NETCore.Extensions.Int64Extensions.ToFileSize(System.Int64)">
            <summary>
            将指定的长整值转换为对应的字节大小
            </summary>
            <param name="FileSize"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.Int64Extensions.ToEnum``1(System.Int64,``0)">
            <summary>
            将字符串转成指定的枚举类型(字符串可以是枚举的名称也可以是枚举值)
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="source">源字符串</param>
            <param name="defaultValue">如果转换失败，返回默认的枚举项</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.Int64Extensions.ToEnumExt``1(System.Int64,``0)">
            <summary>
            将字符串转成指定的枚举类型(字符串可以是枚举的名称也可以是枚举值)
            <remarks>支持枚举值的并集</remarks>
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="source">源字符串</param>
            <param name="defaultValue">如果转换失败，返回默认的枚举项</param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Extensions.JsonExtensions">
            <summary>
            Json序列化和反序列化方法
            </summary>
        </member>
        <member name="M:Zero.NETCore.Extensions.JsonExtensions.ToJson``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            对象转换为Json字符串(使用Newtonsoft.Json4.5 Release 5)
            </summary>
            <param name="obj"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.JsonExtensions.DeserializeJson``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Json字符串转换为对象(使用Newtonsoft.Json4.5 Release 5)
            </summary>
            <param name="json"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.JsonExtensions.TryDeserializeJson``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            尝试解析json字符串,不抛出异常.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Extensions.ObjectExtensions">
            <summary>
            对象扩展方法
            </summary>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToInt32(System.Object)">
            <summary>
            将对象转成Int32类型，如果转换失败，则返回-1
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToInt32(System.Object,System.Int32)">
            <summary>
            将对象转成Int32类型
            </summary>
            <param name="source"></param>
            <param name="defaultValue">如果转换失败，返回的数值</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToInt64(System.Object)">
            <summary>
            将对象转成Int64类型，如果转换失败，则返回-1
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToInt64(System.Object,System.Int64)">
            <summary>
            将对象转成Int64类型
            </summary>
            <param name="source"></param>
            <param name="defaultValue">如果转换失败，返回的数值</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToDouble(System.Object)">
            <summary>
            将对象转成double类型，如果转换失败，则返回-1
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToFloat(System.Object)">
            <summary>
            将对象转成float类型，如果转换失败，则返回-1
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToFloat(System.Object,System.Single)">
            <summary>
            将对象转成float类型
            </summary>
            <param name="source"></param>
            <param name="defaultValue">如果转换失败，返回的数值</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToDouble(System.Object,System.Double)">
            <summary>
            将对象转成double类型
            </summary>
            <param name="source"></param>
            <param name="defaultValue">如果转换失败，返回的数值</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToByte(System.Object,System.Byte)">
            <summary>
            将对象转成Byte类型
            </summary>
            <param name="source"></param>
            <param name="defaultValue">如果转换失败，返回的数值</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将对象转换成DateTime类型
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToDateTime(System.Object)">
            <summary>
             将对象转换成DateTime类型
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.ObjectExtensions.ToByte(System.Object)">
            <summary>
            将对象转成Byte类型
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Extensions.OtherExtensions">
            <summary>
            其它扩展方法
            </summary>
        </member>
        <member name="M:Zero.NETCore.Extensions.OtherExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            根据指定委托从数组中查找位置,未找到返回-1
            </summary>
            <typeparam name="T">数组元素类型</typeparam>
            <param name="array">数组对象</param>
            <param name="method">定义一组条件并确定指定对象是否符合这些条件的方法</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.OtherExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Predicate{``0},System.Int32)">
            <summary>
            根据指定委托从数组中查找位置,未找到返回-1
            </summary>
            <typeparam name="T">数组元素类型</typeparam>
            <param name="array">数组对象</param>
            <param name="method">定义一组条件并确定指定对象是否符合这些条件的方法</param>
            <param name="startIndex">从零开始的搜索的起始索引</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.OtherExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Predicate{``0},System.Int32,System.Int32)">
            <summary>
            根据指定委托从数组中查找位置,未找到返回-1
            </summary>
            <typeparam name="T">数组元素类型</typeparam>
            <param name="array">数组对象</param>
            <param name="method">定义一组条件并确定指定对象是否符合这些条件的方法</param>
            <param name="startIndex">从零开始的搜索的起始索引</param>
            <param name="count">要搜索的部分中的元素数</param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Extensions.ServiceProviderServiceExtensions">
            <summary>
            服务提供扩展方法
            </summary>
        </member>
        <member name="M:Zero.NETCore.Extensions.ServiceProviderServiceExtensions.AddAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            注入程序集
            </summary>
            <param name="service"></param>
            <param name="assemblyName">要注入程序集的名称</param>
        </member>
        <member name="M:Zero.NETCore.Extensions.ServiceProviderServiceExtensions.AddZeroNetCoreAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入Zero.NETCore程序集
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Zero.NETCore.Extensions.ServiceProviderServiceExtensions.AddZeroNETCoreRediosAssmbly(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入Zero.NETCore.Redis程序集,注入之前请确认是否nuget上安装了Zero.NETCore.Redis包
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Zero.NETCore.Extensions.StringExtensions">
            <summary>
            字符串扩展方法
            </summary>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.GetRealLength(System.String)">
            <summary>
            获取字符串的实际长度(按单字节)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.SubString(System.String,System.Int32)">
            <summary>
            取得固定长度的字符串(按单字节截取)。
            </summary>
            <param name="source">源字符串</param>
            <param name="resultLength">截取长度</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.SubStr(System.String,System.Int32)">
            <summary>
            取得固定长度字符的字符串，后面加上…(按单字节截取)
            </summary>
            <param name="source"></param>
            <param name="resultLength"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            判断字符串是否为null或为空.判断为空操作前先进行了Trim操作。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsInteger(System.String)">
            <summary>
            判断字符串是否为整型
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsEmail(System.String)">
            <summary>
            Email 格式是否合法
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsPublicIP(System.String)">
            <summary>
            判断是否公网IP
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsIP(System.String)">
            <summary>
            验证IP
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsLetterOrNumber(System.String)">
            <summary>
            检查字符串是否为A-Z、0-9及下划线以内的字符
            </summary>
            <param name="source">被检查的字符串</param>
            <returns>是否有特殊字符</returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsSpecialChar(System.String)">
            <summary>
            验输入字符串是否含有“/\:.?*|$]”特殊字符
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsChineseChar(System.String)">
            <summary>
            是否全为中文/日文/韩文字符
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsDoubleChar(System.String)">
            <summary>
            是否包含双字节字符(允许有单字节字符)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsDate(System.String)">
            <summary>
            是否为日期型字符串
            </summary>
            <param name="source">日期字符串(2005-6-30)</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsTime(System.String)">
            <summary>
            是否为时间型字符串
            </summary>
            <param name="source">时间字符串(15:00:00)</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsDateTime(System.String)">
            <summary>
            是否为日期+时间型字符串
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.IsPhysicalPath(System.String)">
            <summary>
            是否为文件物理路径
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToBase64(System.String)">
            <summary>
            将字符串使用base64算法加密
            </summary>
            <param name="source">待加密的字符串</param>
            <returns>加码后的文本字符串</returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.FromBase64(System.String)">
            <summary>
            从Base64编码的字符串中还原字符串，支持中文
            </summary>
            <param name="source">Base64加密后的字符串</param>
            <returns>还原后的文本字符串</returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.FromGBToUTF8(System.String)">
            <summary>
            将 GB2312 值转换为 UTF8 字符串(如：测试 -> 娴嬭瘯 )
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.FromUTF8ToGB(System.String)">
            <summary>
            将 UTF8 值转换为 GB2312 字符串 (如：娴嬭瘯 -> 测试)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.FromHex(System.String)">
            <summary>
            由16进制转为汉字字符串（如：B2E2 -> 测 ）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToHex(System.String)">
            <summary>
            字符串转为16进制字符串（如：测 -> B2E2 ）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToUnicode(System.String)">
            <summary>
            字符串转为unicode字符串（如：测试 -> &#27979;&#35797;）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToUTF8(System.String)">
            <summary>
            字符串转为UTF8字符串（如：测试 -> \u6d4b\u8bd5）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToSafeSql(System.String)">
            <summary>
            将字符串转为安全的Sql字符串，不建议使用。尽可能使用参数化查询来避免
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToSafeJsString(System.String)">
            <summary>
            将字符串转换化安全的js字符串值（对字符串中的' "进行转义) 
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToEscapeRegChars(System.String)">
            <summary>
            注释like操作字符串中出现的特殊符号
            </summary>
            <remarks>注意：如果like查询中本身有使用到特殊字符，请不要使用此方法</remarks>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.WrapWithCData(System.String)">
            <summary>
            将字符串包装成 &lt;![CDATA[字符串]]&gt; 形式
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToSafeXmlString(System.String)">
            <summary>
            将字符串转换化安全的XML字符串值
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.NarrowToSmall(System.String)">
            <summary>   
            将字母，数字由全角转化为半角   
            </summary>   
            <returns></returns>   
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.NarrowToBig(System.String)">
            <summary>   
            将字母，数字由半角转化为全角   
            </summary>   
            <param name="inputString"></param>   
            <returns></returns>   
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToInt32(System.String)">
            <summary>
            将字符串转成Int32类型，如果转换失败，则返回-1
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToInt32(System.String,System.Int32)">
            <summary>
            将字符串转成Int32类型
            </summary>
            <param name="source">源字符串</param>
            <param name="defaultValue">如果转换失败，返回的数值</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToInt64(System.String)">
            <summary>
            将字符串转成Int64类型，如果转换失败，则返回-1
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToInt64(System.String,System.Int64)">
            <summary>
            将字符串转成Int64类型
            </summary>
            <param name="source">源字符串</param>
            <param name="defaultValue">如果转换失败，返回的数值</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToDouble(System.String)">
            <summary>
            将字符串转成double类型，如果转换失败，则返回-1
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToDouble(System.String,System.Double)">
            <summary>
            将字符串转成double类型
            </summary>
            <param name="source">源字符串</param>
            <param name="defaultValue">如果转换失败，返回的数值</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToDateTime(System.String)">
            <summary>
            将字符串转成DateTime类型，如果转换失败，则返回当前时间
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToDateTime(System.String,System.DateTime)">
            <summary>
            将字符串转成DateTime类型
            </summary>
            <param name="source">源字符串</param>
            <param name="defaultValue">如果转换失败，返回的默认时间</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToBoolean(System.String)">
            <summary>
            将字符串转成Boolean类型，如果转换失败，则返回false
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToEnum``1(System.String,``0)">
            <summary>
            将字符串转成指定的枚举类型(字符串可以是枚举的名称也可以是枚举值)
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="source">源字符串</param>
            <param name="defaultValue">如果转换失败，返回默认的枚举项</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ToEnumExt``1(System.String,``0)">
            <summary>
            将字符串转成指定的枚举类型(字符串可以是枚举的名称也可以是枚举值)
            <remarks>支持枚举值的并集</remarks>
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="source">源字符串</param>
            <param name="defaultValue">如果转换失败，返回默认的枚举项</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.ReplaceNonValidChars(System.String,System.String)">
            <summary>
            去除文件名中不可用于文件名的11个字符
            </summary>
            <param name="filenameNoDir"></param>
            <param name="replaceWith">用什么字符串替换</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.RemoveNonPrintChars(System.String)">
            <summary>
            去除非打印字符
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.GetPinYin(System.String)">
            <summary>
            获取汉字字符串的首字母
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.GetChineseSpell(System.String)">
            <summary>
            取得汉字字符串的拼音的首字母
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.StringExtensions.getSpell(System.String)">
            <summary>
            取得汉字字符的拼音的首字母
            </summary>
            <param name="cnChar"></param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Extensions.XmlExtensions">
            <summary>
            Xml序列化和反序列化方法
            </summary>
        </member>
        <member name="M:Zero.NETCore.Extensions.XmlExtensions.XmlSerialize``1(``0,System.String)">
            <summary>
            序列化对象为XML文件
            </summary>
            <typeparam name="T">
            需要序列化的对象类型，必须声明[Serializable]特征，且属性类也必须声明[Serializable]特征。
            如果属性是抽象类或接口，必须声明[System.Xml.Serialization.XmlInclude(typeof(子类))]特征
            </typeparam>
            <param name="obj">需要序列化的对象</param>
            <param name="serializeFilePath">序列化后的物理文件路径</param>
        </member>
        <member name="M:Zero.NETCore.Extensions.XmlExtensions.XmlDeserialize``1(System.String)">
            <summary>
            反序列化XML文件为对象
            </summary>
            <typeparam name="T">
            需要序列化的对象类型，必须声明[Serializable]特征，且属性类也必须声明[Serializable]特征。
            如果属性是抽象类或接口，必须声明[System.Xml.Serialization.XmlInclude(typeof(子类))]特征
            </typeparam>
            <param name="serializeFilePath">反序列化对象的物理文件路径</param>
        </member>
        <member name="M:Zero.NETCore.Extensions.XmlExtensions.XmlSerializeToString``1(``0)">
            <summary>
            把对象序列化为Xml字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Extensions.XmlExtensions.XmlDeserializeFromStrNew``1(System.String)">
            <summary>
            把Xml字符串反序列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.LogClient">
            <summary>
            日志记录类
            </summary>
        </member>
        <member name="M:Zero.NETCore.LogClient.#ctor(Zero.NETCore.Web.WebClient)">
            <summary>
            构造类(可注入)
            </summary>
            <param name="webClient"></param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteInfo(System.String)">
            <summary>
            写入普通日志消息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteDebug(System.String)">
            <summary>
            写入Debug日志消息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteError(System.String)">
            <summary>
            写入错误日志消息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteException(System.Exception,System.Int32)">
            <summary>
            写入异常日志信息
            </summary>
            <param name="ex"></param>
            <param name="frameIndex"></param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteException(System.String,System.Exception)">
            <summary>
            写入异常日志信息
            </summary>
            <param name="info"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteFatal(System.String)">
            <summary>
            写入严重错误日志消息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteComplement(System.String)">
            <summary>
            写入补充日志
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteComplement(System.String,System.Exception)">
            <summary>
            写入补充日志
            </summary>
            <param name="info"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteCustom(System.String,System.String)">
            <summary>
            写入自定义日志到自定义目录,本方法对应的Nlog.config配置示例：
             &lt;targets>
               &lt;target name="LogCustom" xsi:type="File" layout="${message}"
                     fileName="${logDirectory}\${event-context:DirOrPrefix}${date:format=yyyyMMddHH}.txt">&lt;/target>
             &lt;/targets>
             &lt;rules>
               &lt;logger name="LogCustom" level="Warn" writeTo="LogCustom" />
            </summary>
            <param name="message">要写入的消息</param>
            <param name="dirOrPrefix">
            写入到的子目录或文件前缀，如果字符串包含\，则是子目录
            比如 aa\bb 则写入的文件名为aa目录下的bb开头加日期
            </param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteCustom(System.String,System.String,System.Boolean)">
            <summary>
            写入自定义日志到自定义目录,本方法对应的Nlog.config配置示例：
             &lt;targets>
               &lt;target name="LogCustom" xsi:type="File" layout="${message}"
                     fileName="${logDirectory}\${event-context:DirOrPrefix}${date:format=yyyyMMddHH}.txt">&lt;/target>
             &lt;/targets>
             &lt;rules>
               &lt;logger name="LogCustom" level="Warn" writeTo="LogCustom" />
            </summary>
            <param name="message">要写入的消息</param>
            <param name="dirOrPrefix">
            写入到的子目录或文件前缀，如果字符串包含\，则是子目录
            比如 aa\bb 则写入的文件名为aa目录下的bb开头加日期
            </param>
            <param name="addIpUrl">是否要附加ip和url等信息</param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteCustom(System.String,System.String,System.String)">
            <summary>
            写入自定义日志到自定义目录,本方法对应的Nlog.config配置示例：
             &lt;targets>
               &lt;target name="LogCustom" xsi:type="File" layout="${message}"
                     fileName="${logDirectory}\${event-context:DirOrPrefix}${date:format=yyyyMMddHH}${event-context:Suffix}.txt">&lt;/target>
             &lt;/targets>
             &lt;rules>
               &lt;logger name="LogCustom" level="Warn" writeTo="LogCustom" />
            </summary>
            <param name="message">要写入的消息</param>
            <param name="dirOrPrefix">
            写入到的子目录或文件前缀，如果字符串包含\，则是子目录
            比如 aa\bb 则写入的文件名为aa目录下的bb开头加日期
            </param>
            <param name="suffix">写入到的文件后缀</param>
        </member>
        <member name="M:Zero.NETCore.LogClient.WriteCustom(System.String,System.String,System.String,System.Boolean)">
            <summary>
            写入自定义日志到自定义目录,本方法对应的Nlog.config配置示例：
             &lt;targets>
               &lt;target name="LogCustom" xsi:type="File" layout="${message}"
                     fileName="${logDirectory}\${event-context:DirOrPrefix}${date:format=yyyyMMddHH}${event-context:Suffix}.txt">&lt;/target>
             &lt;/targets>
             &lt;rules>
               &lt;logger name="LogCustom" level="Warn" writeTo="LogCustom" />
            </summary>
            <param name="message">要写入的消息</param>
            <param name="dirOrPrefix">
            写入到的子目录或文件前缀，如果字符串包含\，则是子目录
            比如 aa\bb 则写入的文件名为aa目录下的bb开头加日期
            </param>
            <param name="suffix">写入到的文件后缀</param>
            <param name="addIpUrl">是否要附加ip和url等信息</param>
        </member>
        <member name="T:Zero.NETCore.Result.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.sys_success">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.sys_fail">
            <summary>
            服务器异常
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.sys_param_format_error">
            <summary>
            参数值格式有误
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.sys_correlation_resource_no_exist">
            <summary>
            相关资源不存在
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.user_Reserved_1">
            <summary>
            预留错误码1
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.user_Reserved_2">
            <summary>
            预留错误码2
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.user_Reserved_3">
            <summary>
            预留错误码3
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.user_Reserved_4">
            <summary>
            预留错误码4
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.user_Reserved_5">
            <summary>
            预留错误码5
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.user_Reserved_6">
            <summary>
            预留错误码6
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.user_Reserved_7">
            <summary>
            预留错误码7
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.user_Reserved_8">
            <summary>
            预留错误码8
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.ErrorCode.user_custom">
            <summary>
            用户自定义错误码
            </summary>
        </member>
        <member name="T:Zero.NETCore.Result.SysResult">
            <summary>
            返回结果集
            </summary>
        </member>
        <member name="F:Zero.NETCore.Result.SysResult.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Zero.NETCore.Result.SysResult.ErrorDesc">
            <summary>
            附加消息
            </summary>
        </member>
        <member name="P:Zero.NETCore.Result.SysResult.OccurError">
            <summary>
            是否异常
            </summary>
        </member>
        <member name="P:Zero.NETCore.Result.SysResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="M:Zero.NETCore.Result.SysResult.GetData">
            <summary>
            获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Result.SysResult`1">
            <summary>
            返回结果集
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Zero.NETCore.Result.SysResult`1.Result">
            <summary>
            返回结果
            </summary>
        </member>
        <member name="M:Zero.NETCore.Result.SysResult`1.GetData">
            <summary>
            获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Snowflake">
            <summary>
            雪花算法
            </summary>
        </member>
        <member name="M:Zero.NETCore.Snowflake.#ctor(System.Int64)">
            <summary>
            初始化机器码,范围0-31,如果超过范围,则WorkID等于0
            </summary>
            <param name="workID"></param>
        </member>
        <member name="M:Zero.NETCore.Snowflake.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            DI容器注册
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Zero.NETCore.Snowflake.NewID">
            <summary>
            生成新的ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Snowflake.ResetFlowID(System.Int64)">
            <summary>
            重置流水号
            </summary>
            <param name="ticks"></param>
        </member>
        <member name="M:Zero.NETCore.Snowflake.GetTicks">
            <summary>
            获取时间戳(55位)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Snowflake.GetNextTicks">
            <summary>
            流水号溢出获取下一个时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Snowflake.GetWorkID">
            <summary>
            获取机器ID(5位)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Snowflake.GetFlowID">
            <summary>
            获取流水号(3位)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Util.ContentTypeHelper">
            <summary>
            ContentType
            </summary>
        </member>
        <member name="M:Zero.NETCore.Util.ContentTypeHelper.GetMimeTypeByFileName(System.String)">
            <summary>
            根据文件名获取MimeType
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.ContentTypeHelper.GetMimeTypeByExtName(System.String)">
            <summary>
            根据文件后缀名获取MimeType
            </summary>
            <param name="extName"></param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Util.CryptoHelper">
            <summary>
            加密帮助类 
            </summary>
        </member>
        <member name="F:Zero.NETCore.Util.CryptoHelper.KEY_Complement">
            <summary>
            3DES加解密的默认密钥, 前8位作为向量
            </summary>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.UrlParamUrlEncodeRun(System.String)">
            <summary>
            使用Get传输替换关键字符为全角
            </summary>
            <param name="UrlParam"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.UrlParamUrlDecodeRun(System.String)">
            <summary>
            使用Get传输替换关键字符为半角
            </summary>
            <param name="UrlParam"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.MD5_Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            标准MD5加密
            </summary>
            <param name="source">待加密字符串</param>
            <param name="addKey">附加字符串</param>
            <param name="encoding">编码方式</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.MD5_Encrypt(System.Byte[])">
            <summary>
            标准md5加密
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.MD5_Encrypt(System.String,System.Text.Encoding)">
            <summary>
            标准MD5加密
            </summary>
            <param name="source">待加密字符串</param>
            <param name="encoding">编码方式</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.MD5_Encrypt(System.String)">
            <summary>
            标准MD5加密
            </summary>
            <param name="source">被加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.RegUser_MD5_Pwd(System.String)">
            <summary>
            返回使用MD5加密后字符串
            </summary>
            <param name="strpwd">待加密字符串</param>
            <returns>加密后字符串</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.DES_Encrypt(System.String,System.String)">
            <summary>
            Desc加密 Encoding.Default
            </summary>
            <param name="source">待加密字符</param>
            <param name="key">密钥</param>
            <returns>string</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.DES_Encrypt(System.String)">
            <summary>
            使用默认key 做 DES加密 Encoding.Default
            </summary>
            <param name="source">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.DES_Decrypt(System.String)">
            <summary>
            使用默认key 做 DES解密 Encoding.Default
            </summary>
            <param name="source">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.DES_Decrypt(System.String,System.String)">
            <summary>
            DES解密 Encoding.Default
            </summary>
            <param name="source">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.DES_Encrypt_Client(System.String,System.String)">
            <summary>
            与客户端通用的des加密
            </summary>
            <param name="source">明文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.DES_Decrypt_Client(System.String,System.String)">
            <summary>
            与客户端通用的des解密
            </summary>
            <param name="source">密文</param>
            <param name="key">密匙</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.StringToHex(System.String)">
            <summary>
            把字符串转换为16进制字符串
            如：a变成61（即10进制的97）；abc变成616263
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.HexTostring(System.String)">
            <summary>
            16进制字符串转换为字符串
            如：61（即10进制的97）变成a；616263变成abc
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.RM(System.Int32,System.Int32)">
            <summary>
            带符号位右移（类似于js的>>>）
            </summary>
            <param name="a">用于右移的操作数</param>
            <param name="bit">右移位数</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.Des(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            加解密主调方法
            </summary>
            <param name="beinetkey">密钥</param>
            <param name="message">加密时为string，解密时为byte[]</param>
            <param name="encrypt">true：加密；false：解密</param>
            <param name="mode">true：CBC mode；false：非CBC mode</param>
            <param name="iv">初始化向量</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.Des_CreateKeys(System.String)">
            <summary>
            this takes as input a 64 bit beinetkey(even though only 56 bits are used)
            as an array of 2 integers,and returns 16 48 bit keys
            </summary>
            <param name="beinetkey"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.TripleDES_Encrypt(System.String,System.String,System.String)">
            <summary>
            使用指定的key和iv，加密input数据
            </summary>
            <param name="input"></param>
            <param name="key">密钥，必须为24位长度</param>
            <param name="iv">微量，必须为8位长度</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.TripleDES_Decrypt(System.String,System.String,System.String)">
            <summary>
            使用指定的key和iv，解密input数据
            </summary>
            <param name="input"></param>
            <param name="key">密钥，必须为24位长度</param>
            <param name="iv">微量，必须为8位长度</param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.TripleDesEncrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            3Des加密，密钥长度必需是24字节
            </summary>
            <param name="key">密钥字节数组</param>
            <param name="iv">向量字节数组</param>
            <param name="source">源字节数组</param>
            <returns>加密后的字节数组</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.TripleDesDecrypt(System.Byte[],System.Byte[],System.Byte[],System.Int32@)">
            <summary>
            3Des解密，密钥长度必需是24字节
            </summary>
            <param name="key">密钥字节数组</param>
            <param name="iv">向量字节数组</param>
            <param name="source">加密后的字节数组</param>
            <param name="dataLen">解密后的数据长度</param>
            <returns>解密后的字节数组</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.TripleDesDecrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            3Des解密，密钥长度必需是24字节
            </summary>
            <param name="key">密钥字节数组</param>
            <param name="iv">向量字节数组</param>
            <param name="source">加密后的字节数组</param>
            <returns>解密后的字节数组</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.SHA1_Encrypt(System.String)">
            <summary>
            SHA1加密，等效于 PHP 的 SHA1() 代码
            </summary>
            <param name="source">被加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.HttpBase64Encode(System.String)">
            <summary>
            编码 通过HTTP传递的Base64编码
            </summary>
            <param name="source">编码前的</param>
            <returns>编码后的</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.HttpBase64Decode(System.String)">
            <summary>
            解码 通过HTTP传递的Base64解码
            </summary>
            <param name="source">解码前的</param>
            <returns>解码后的</returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.GetMD5HashFromFile(System.String)">
            <summary>
            计算文件的MD5值并返回
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.AES_Encrypt(System.String,System.String)">
             <summary>  
            AES加密（加密步骤）  
            1，加密字符串得到2进制数组；    
            2，进行base64编码  
             </summary>  
             <param name="toEncrypt">要加密的字符串</param>  
             <param name="key">密钥</param>  
        </member>
        <member name="M:Zero.NETCore.Util.CryptoHelper.AES_Decrypt(System.String,System.String)">
            <summary>  
            AES解密（解密步骤）  
            1，将BASE64字符串转为数组  
            2，用AES解密数据  
            </summary>  
            <param name="encryptedSource">已加密的内容</param>  
            <param name="key">密钥</param>  
        </member>
        <member name="T:Zero.NETCore.Util.EnumHelper">
            <summary>
            枚举帮助类
            </summary>
        </member>
        <member name="M:Zero.NETCore.Util.EnumHelper.GetNVCFromEnumValue(System.Type)">
            <summary>
            从枚举类型返回枚举值和描述信息的组合字符串（如：1|共享,2|免费,3|试用）
            </summary>
            <param name="enumType">Type,该参数的格式为typeof(需要读的枚举类型)</param>
            <returns>键值对</returns>
        </member>
        <member name="T:Zero.NETCore.Util.FileHelper">
            <summary>
            文件帮助类
            </summary>
        </member>
        <member name="M:Zero.NETCore.Util.FileHelper.IsImage(System.String)">
            <summary>
            验证文件名是否是图片
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Util.KeyValueHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zero.NETCore.Util.KeyValueHelper.GetValue(System.String,System.String)">
            <summary>
            组合字符串格式（例：1|共享,2|免费,3|试用）
            </summary>
            <param name="valueKeys"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.KeyValueHelper.GetKey(System.String,System.String)">
            <summary>
            组合字符串格式（例：1|共享,2|免费,3|试用）
            </summary>
            <param name="valueKeys"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Util.SerializeHelper">
            <summary>
            序列化辅助类
            </summary>
        </member>
        <member name="M:Zero.NETCore.Util.SerializeHelper.BinarySerialize``1(``0,System.String)">
            <summary>
            序列化对象为二进制文件
            </summary>
            <typeparam name="T">需要序列化的对象类型，必须声明[Serializable]特征，且必须是public类</typeparam>
            <param name="obj">需要序列化的对象</param>
            <param name="serializeFilePath">序列化后的物理文件路径</param>
        </member>
        <member name="M:Zero.NETCore.Util.SerializeHelper.BinaryDeserialize``1(System.String)">
            <summary>
            反序列化二进制文件为对象
            </summary>
            <typeparam name="T">需要反序列化的对象类型，必须声明[Serializable]特征</typeparam>
            <param name="serializeFilePath">反序列化对象的物理文件路径</param>
        </member>
        <member name="T:Zero.NETCore.Util.TextHelper">
            <summary>
            有关文本及编码方面的实用方法
            </summary>
        </member>
        <member name="M:Zero.NETCore.Util.TextHelper.GetChineseInitials(System.String)">
            <summary>
            获取（中文）字符串的每个字符的首字母。
            </summary>
            <param name="chineseString"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.TextHelper.Encode7Bit(System.String)">
            <summary>
            将ASCII字符串转为七位编码字节数组。
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.TextHelper.Decode7Bit(System.Byte[])">
            <summary>
            将七位编码的字节数组转为ASCII字符串。
            </summary>
            <param name="sourceBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.TextHelper.ToHexString(System.Byte[])">
            <summary>
            将字节数组转换为十六进制字符串。
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.TextHelper.FromHexString(System.String)">
            <summary>
            将十六进制字符串转换为字节数组。
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="T:Zero.NETCore.Util.TokenHelper">
            <summary>
            网络授权帮助类(只支持所有属性为字符串类型的类)
            </summary>
        </member>
        <member name="M:Zero.NETCore.Util.TokenHelper.Serialize``1(``0,System.String)">
            <summary>
            序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <param name="encryKey"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Util.TokenHelper.Deserialize``1(System.String,System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="token"></param>
            <param name="encryKey"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Web.AppPageList`1.#ctor(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="list"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="RecordCount"></param>
        </member>
        <member name="P:Zero.NETCore.Web.AppPageList`1.List">
            <summary>
            数据列表
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.AppPageList`1.IsLastPage">
            <summary>
            是否最后一页
            </summary>
        </member>
        <member name="T:Zero.NETCore.Web.PageList`1">
            <summary>
            分页列表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Zero.NETCore.Web.PageList`1.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:Zero.NETCore.Web.PageList`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int64)">
            <summary>
            初始化
            </summary>
            <param name="list"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="recordCount"></param>
        </member>
        <member name="M:Zero.NETCore.Web.PageList`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int64,System.Object)">
            <summary>
            初始化
            </summary>
            <param name="list"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="recordCount"></param>
            <param name="extend"></param>
        </member>
        <member name="P:Zero.NETCore.Web.PageList`1.RecordCount">
            <summary>
            全部数据总数
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.PageList`1.PageCount">
            <summary>
            页面总数
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.PageList`1.PageIndex">
            <summary>
            当前页面索引
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.PageList`1.PageSize">
            <summary>
            页面数据数量
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.PageList`1.List">
            <summary>
            数据列表
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.PageList`1.IsLastPage">
            <summary>
            是否最后一页
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.PageList`1.Extend">
            <summary>
            扩展对象
            </summary>
        </member>
        <member name="T:Zero.NETCore.Web.WebCache">
            <summary>
            缓存帮助类
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.WebCache.MemoryCache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:Zero.NETCore.Web.WebCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            缓存初始化
            </summary>
            <param name="memoryCache"></param>
        </member>
        <member name="M:Zero.NETCore.Web.WebCache.RenderKey(System.String,System.String[])">
            <summary>
            生成Key
            </summary>
            <param name="prefixKey"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Web.WebCache.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Web.WebCache.Set``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            设置缓存,默认15分钟
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="cache"></param>
        </member>
        <member name="M:Zero.NETCore.Web.WebCache.Get``1(System.String,System.Func{``0},System.Int32,System.Boolean)">
            <summary>
            获取缓存,如果不存在则创建新缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Web.WebCache.Clear">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:Zero.NETCore.Web.WebCache.IsDefaultValue``1(``0)">
            <summary>
            是否默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Web.WebCache.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Zero.NETCore.Web.WebClient">
            <summary>
            Web客户端信息
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.WebClient.Request">
            <summary>
            http请求信息
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.WebClient.HttpContextAccessor">
            <summary>
            http上下文
            </summary>
        </member>
        <member name="M:Zero.NETCore.Web.WebClient.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            初始化
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Zero.NETCore.Web.WebClient.GetParam(System.String)">
            <summary>
            获取上传的字符串值
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="P:Zero.NETCore.Web.WebClient.PostData">
            <summary>
            Post数据流
            </summary>
        </member>
        <member name="T:Zero.NETCore.Web.WebConfig">
            <summary>
            配置帮助类
            </summary>
        </member>
        <member name="P:Zero.NETCore.Web.WebConfig.Configuration">
            <summary>
            配置文件
            </summary>
        </member>
        <member name="M:Zero.NETCore.Web.WebConfig.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            配置初始化
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Zero.NETCore.Web.WebConfig.GetValue``1(System.String,``0)">
            <summary>
            获取单个配置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Web.WebConfig.Get``1(System.String)">
            <summary>
            获取配置对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Zero.NETCore.Web.WebConfig.Set``1(System.String,``0)">
            <summary>
            设置配置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
    </members>
</doc>
